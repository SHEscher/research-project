# Check this for proper formatting: https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
[project]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "Run and analyse the {{ cookiecutter.project_name }} study ({% now 'local', '%Y' %})"
readme = "README.md"
requires-python = ">={{ cookiecutter.python_version }}"
license = { file = "LICENSE" }
authors = [
    { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
maintainers = [
    { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
keywords = ["very", "great", "study"]
# Check for classifiers: https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: {{ cookiecutter.python_version.split('.')[0] }}",
    "Programming Language :: Python :: {{ cookiecutter.python_version }}",
]

dependencies = [
    "ipykernel",
    "numpy",
    "pandas",
    "toml>=0.10; python_version < '3.11'",
]

[project.optional-dependencies]
test = [
    {%- if cookiecutter.use_black == 'y' %}
    "black",
    {%- endif %}
    {%- if cookiecutter.linting == 'ruff' %}
    "ruff",
    {%- elif cookiecutter.linting == 'flake8' %}
    "flake8",
    {%- endif %}
    "tox>=3.25.1",
    {%- if cookiecutter.use_pytest == 'y' %}
    "pytest",
    "pytest-cov",
    {%- endif %}
]

[project.urls]
homepage = "https://www.{{ cookiecutter.project_slug }}.org"                                         # TODO: change to actual homepage
documentation = "https://readthedocs.org"                                                            # TODO: change to actual documentation
repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}" # TODO: change to actual repository
# Consider other URLs: pre-registration, data repository, etc.

# Entry points for the project
# For a command line interface (CLI)
# [project.scripts]
# {{ cookiecutter.project_slug }} = "{{ cookiecutter.project_slug }}.{{ cookiecutter.project_slug }}:main"

[tool.setuptools]
platforms = ["unix", "linux", "osx", "cygwin", "win32"]
zip-safe = false

# # To automatically find the package(s) (Beta feature (Oct, 2022)):
[tool.setuptools.packages.find]
where = ["code"]
include = ["{{ cookiecutter.project_slug }}"]
exclude = ["tests"]

# Include non-python files in the package
# [options.package_data]
# {{ cookiecutter.project_slug }} = ["*.txt", "*.rst"]

# Exclude specific non-python files in the package
# [tool.setuptools.exclude-package-data]
# {{ cookiecutter.project_slug }} = [".gitattributes"]

# ALL ABOVE IS ADAPTATION OF THE FORMER setup.cfg
# ALL BELOW WAS ALREADY PART OF pyproject.toml [Oct, 2022]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
#addopts = "--cov={{ cookiecutter.project_slug }}"
testpaths = ["code/tests"]

[tool.mypy]
mypy_path = "code"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.coverage.run]
data_file = "code/tests/.coverage"

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]

[tool.coverage.html]
directory = "code/tests/coverage_html_report"

{%- if cookiecutter.linting == 'ruff' %}

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
ignore = [
    # "E501", # ignore line-length
]
line-length = 119 # Same as flake8 and black
target-version = "py{{ cookiecutter.python_version.replace('.', '') }}" # assume Python {{ cookiecutter.python_version }}

{%- elif cookiecutter.linting == 'flake8' %}

[tool.flake8]
max-line-length = 119

{%- endif %}

{%- if cookiecutter.use_black == 'y' %}

[tool.black]
line-length = 119
target-version = ["py{{ cookiecutter.python_version.replace('.', '') }}"]
# preview = true
{%- endif %}
